{
    // Place your Loess snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
    // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
    // used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
    // Placeholders with the same ids are connected.
    // Example:
    // "Print to console": {
    // 	"scope": "javascript,typescript",
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }
    "quote_into_mixed_site!": {
        "scope": "rust",
        "prefix": "quote_into_mixed_site! (recommended)",
        "body": [
            "quote_into_mixed_site!(${1:span}, ${2|root,&root|}, ${3|tokens,&mut output|}, {",
            "\t$0",
            "});"
        ],
    },
    "quote_into_with_exact_span!": {
        "scope": "rust",
        "prefix": "quote_into_with_exact_span!",
        "body": [
            "quote_into_with_exact_span!(${1:span}, ${2|root,&root|}, ${3|tokens,&mut output|}, {",
            "\t$0",
            "});"
        ],
    },
    "quote_into_call_site!": {
        "scope": "rust",
        "prefix": "quote_into_call_site!",
        "body": [
            "quote_into_call_site!(${1:span}, ${2|root,&root|}, ${3|tokens,&mut output|}, {",
            "\t$0",
            "});"
        ],
    },
    "raw_quote_into_mixed_site!": {
        "scope": "rust",
        "prefix": "raw_quote_into_mixed_site! (recommended)",
        "body": [
            "raw_quote_into_mixed_site!(${1:span}, ${2|root,&root|}, ${3|tokens,&mut output|}, {",
            "\t$0",
            "});"
        ],
    },
    "raw_quote_into_with_exact_span!": {
        "scope": "rust",
        "prefix": "raw_quote_into_with_exact_span!",
        "body": [
            "raw_quote_into_with_exact_span!(${1:span}, ${2|root,&root|}, ${3|tokens,&mut output|}, {",
            "\t$0",
            "});"
        ],
    },
    "raw_quote_into_call_site!": {
        "scope": "rust",
        "prefix": "raw_quote_into_call_site!",
        "body": [
            "raw_quote_into_call_site!(${1:span}, ${2|root,&root|}, ${3|tokens,&mut output|}, {",
            "\t$0",
            "});"
        ],
    },
    "Loess quote #paste": {
        "scope": "rust",
        "prefix": "#paste",
        "body": [
            "{#(${1:..impl IntoTokens expressions,})} $0"
        ],
        "description": "In Loess quotes, emits `IntoTokes` values."
    },
    "Loess quote #raw": {
        "scope": "rust",
        "prefix": "#raw",
        "body": [
            "{#raw { ${1:verbatim tokens} }} $0"
        ],
        "description": "In Loess quotes, emits all tokens inside verbatim."
    },
    "Loess quote #error": {
        "scope": "rust",
        "prefix": "#error",
        "body": "{#error { ${1:emit literal string} }} $0",
        "description": "In Loess quotes, emits a call to `compile_error!`. You can use built-ins like `stringify!` and `concat!` and other directives inside."
    },
    "Loess quote #root": {
        "scope": "rust",
        "prefix": "#root",
        "body": [
            "{#root}$0"
        ],
        "description": "In Loess quotes, emits a clone of the `$root` with its original `Span`."
    },
    "Loess quote #mixed_site": {
        "scope": "rust",
        "prefix": "#mixed_site",
        "body": "{#mixed_site { ${1:tokens} }} $0",
        "description": "In Loess quotes, emits tokens inside with mixed_site resolution."
    },
    "Loess quote #call_site": {
        "scope": "rust",
        "prefix": "#call_site",
        "body": "{#call_site { ${1:tokens} }} $0",
        "description": "In Loess quotes, emits tokens inside with call_site resolution."
    },
    "Loess quote #located_at": {
        "scope": "rust",
        "prefix": "#located_at",
        "body": [
            "{#located_at(${1:Span expression}) {",
            "\t${2:tokens}",
            "}}",
            "$0"
        ],
        "description": "In Loess quotes, emits tokens inside with the same resolution scope as surrounding tokens, but with the given `Span`'s location."
    },
    "Loess quote #resolved_at": {
        "scope": "rust",
        "prefix": "#resolved_at",
        "body": "{#resolved_at(${1:Span expression}) { ${2:tokens} }} $0",
        "description": "In Loess quotes, emits tokens inside with the same location as surrounding tokens, but with the given `Span`'s resolution scope."
    },
    "Loess quote #with_exact_span": {
        "scope": "rust",
        "prefix": "#with_exact_span",
        "body": "{#with_exact_span(${1:Span expression}) { ${2:tokens} }} $0",
        "description": "In Loess quotes, emits tokens inside with the given `Span`."
    },
    "Loess quote #let": {
        "scope": "rust",
        "prefix": "#let",
        "body": [
            "{#let ${1:pattern} = ${2:expression};}",
            "$0"
        ],
        "description": "In Loess quotes, expands to a `let` statement."
    },
    "Loess quote #let else": {
        "scope": "rust",
        "prefix": "#let else",
        "body": [
            "{#let ${1:pattern} = ${2:expression} else { ${3:diverging statement} };}",
            "$0"
        ],
        "description": "In Loess quotes, expands to a `let … else` statement."
    },
    "Loess quote #let else (block formatting)": {
        "scope": "rust",
        "prefix": "#let else block",
        "body": [
            "{#let ${1:pattern} = ${2:expression} else {",
            "\t${3:!diverging statements}",
            "};}",
            "$0"
        ],
        "description": "In Loess quotes, expands to a `let … else` statement."
    },
    "Loess quote #break": {
        "scope": "rust",
        "prefix": "#break",
        "body": [
            "{#break$1;}",
            "$0"
        ],
        "description": "In Loess quotes, expands to a `break` statement."
    },
    "Loess quote #continue": {
        "scope": "rust",
        "prefix": "#continue",
        "body": [
            "{#continue$1;}",
            "$0"
        ],
        "description": "In Loess quotes, expands to a `continue` statement."
    },
    "Loess quote #return": {
        "scope": "rust",
        "prefix": "#return",
        "body": [
            "{#return$1;}",
            "$0"
        ],
        "description": "In Loess quotes, expands to a `return` statement."
    },
    "Loess quote #if": {
        "scope": "rust",
        "prefix": "#if",
        "body": [
            "{#if ${1:bool expression} {",
            "\t${2:tokens}",
            "}}",
            "$0"
        ],
        "description": "In Loess quotes, expands to an `if`-statement."
    },
    "Loess quote #if let": {
        "scope": "rust",
        "prefix": "#if let",
        "body": [
            "{#if let ${1:pattern} = ${2:expression} {",
            "\t${3:tokens}",
            "}}",
            "$0"
        ],
        "description": "In Loess quotes, expands to an `if let`-statement."
    },
    "Loess quote #if else": {
        "scope": "rust",
        "prefix": "#if else",
        "body": [
            "{#if ${1:bool expression} {",
            "\t${2:tokens}",
            "} else$3 {",
            "\t${4:tokens}",
            "}}",
            "$0"
        ],
        "description": "In Loess quotes, expands to an `if`-statement and fallback branch."
    },
    "Loess quote #if let else": {
        "scope": "rust",
        "prefix": "#if let else",
        "body": [
            "{#if ${1:pattern} = ${2:expression} {",
            "\t${3:tokens}",
            "} else$4 {",
            "\t${5:tokens}",
            "}}",
            "$0"
        ],
        "description": "In Loess quotes, expands to an `if let`-statement and fallback branch."
    },
    "Loess quote #match": {
        "scope": "rust",
        "prefix": "#match",
        "body": [
            "{#match ${1:expression} {",
            "\t${2:pattern} => { ${3:tokens} }",
            "\t$4",
            "}}",
            "$0"
        ],
        "description": "In Loess quotes, expands to a `match` statement."
    },
    "Loess quote #match branch": {
        "scope": "rust",
        "prefix": "#branch",
        "body": [
            "${1:pattern} => { ${2:tokens} }",
            "$0"
        ],
        "description": "A Loess quote `#match` branch."
    },
    "Loess quote #'label:": {
        "scope": "rust",
        "prefix": "#'label:",
        "body": [
            "{#${1:'label}: {",
            "\t${2:tokens}",
            "}}",
            "$0"
        ],
        "description": "In Loess quotes, expands to a block with a label."
    },
    "Loess quote #loop": {
        "scope": "rust",
        "prefix": "#loop",
        "body": [
            "{#loop {",
            "\t${1:tokens}",
            "}}",
            "$0"
        ],
        "description": "In Loess quotes, expands to a `loop`-statement."
    },
    "Loess quote #'label: loop": {
        "scope": "rust",
        "prefix": "#'label: loop",
        "body": [
            "{#${1:'label}: loop {",
            "\t${2:tokens}",
            "}}",
            "$0"
        ],
        "description": "In Loess quotes, expands to a `loop`-statement with a label."
    },
    "Loess quote #for": {
        "scope": "rust",
        "prefix": "#for",
        "body": [
            "{#for ${1:pattern} in ${2:expression} {",
            "\t${3:tokens}",
            "}}",
            "$0"
        ],
        "description": "In Loess quotes, expands to a `for`-loop."
    },
    "Loess quote #'label: for": {
        "scope": "rust",
        "prefix": "#'label: for",
        "body": [
            "{#${1:'label}: for ${2:pattern} in ${3:expression} {",
            "\t${4:tokens}",
            "}}",
            "$0"
        ],
        "description": "In Loess quotes, expands to a `for`-loop with a label."
    },
    "Loess quote #while": {
        "scope": "rust",
        "prefix": "#while",
        "body": [
            "{#while ${1:expression} {",
            "\t${2:tokens}",
            "}}",
            "$0"
        ],
        "description": "In Loess quotes, expands to a `while`-loop."
    },
    "Loess quote #'label: while": {
        "scope": "rust",
        "prefix": "#'label: while",
        "body": [
            "{#${1:'label}: while ${2:expression} {",
            "\t${3:tokens}",
            "}}",
            "$0"
        ],
        "description": "In Loess quotes, expands to a `while`-loop with a label."
    },
    "Loess quote #while let": {
        "scope": "rust",
        "prefix": "#while let",
        "body": [
            "{#while let ${1:pattern} = ${2:expression} {",
            "\t${3:tokens}",
            "}}",
            "$0"
        ],
        "description": "In Loess quotes, expands to a `while let`-loop."
    },
    "Loess quote #'label: while let": {
        "scope": "rust",
        "prefix": "#'label: while let",
        "body": [
            "{#${1:'label}: while let ${2:pattern} = ${3:expression} {",
            "\t${4:tokens}",
            "}}",
            "$0"
        ],
        "description": "In Loess quotes, expands to a `while let`-loop with a label."
    }
}